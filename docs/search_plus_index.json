{"./":{"url":"./","title":"介绍","keywords":"","body":"Everything is fine 更新日志： 2020年10月10日 初探 2020年10月11日 完工 2020年10月11日 实验一 2020年10月16日 实验二 2020年10月26日 实验三 2021年1月10日 实验四 双音多频信号的识别 "},"content/exp.html":{"url":"content/exp.html","title":"信号与系统实践环节","keywords":"","body":"Develop by alone "},"content/exp01.html":{"url":"content/exp01.html","title":"实验一","keywords":"","body":"实验一 1、申请Github账号 ①进入Github官网 https://github.com/ ②输入用户名，邮箱，密码，验证码 ③建立完毕 2、安装VCCODE ①进入官网 https://code.visualstudio.com/ ②点击下载安装 ③安装汉化：按下快捷键ctrl+shift+p，输入搜索configuration display language，选择Install additional languages，安装简体中文汉化包 ④重启软件 ⑤汉化完成 3、实现Github在本地端和云端的数据同步 ①云端建立Github库 ②打开Git官网 https://git-scm.com/，下载并安装 ②在Git命令行模式下 输入如下命令，配置username和useremail git config --global user.name \"username\" git config --global user.email \"example@example.com\" 输入git config --list，显示user.name和user.email即为成功，如下 $ git config --list diff.astextplain.textconv=astextplain filter.lfs.clean=git-1fs clean-- filter.lfs.smudge=git-Ifs smudge-- %f filter.lfs.process=git-1fs fi1ter-process filter.lfs.required=true http.sslbackend=openss1 http.ssIcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt core.autocrlf=true core.fscache=true core.symlinks=false pull.rebase=false credential.helper=manager user.name=[username] user.email=[useremail] ③建立SSH并连接至Github 创建密钥文件 ssh-keygen -t rsa -C example@example.com（改为自己的邮箱） 大部分情况下，密钥生成在C:\\Users\\电脑用户名.ssh路径下 第一个文件是私钥，第二个文件是公钥。将公钥文件以记事本类型打开，复制里面的内容。进入Github自己建立的库中，选择Settings→Deploy keys→Add deploy key 在Git命令行中 输入 ssh -T git@github.com 显示You‘ve successfully authenticated即成功。 ④本地建立Github库 1、新建目录（名字必须英文） 2、在Git命令行下输入git init 3、在Git命令行下输入git clone git@github.com:用户名/库名称.github.io.git 4、在Git命令行下输入git status，如图所示即为成功 ⑤拉取云端文件 在Git命令行下输入 git pull ⑥修改本地文件并上传 在本地库文件夹新建一个文件1.txt 1、在Git命令行下输入git status，确认文件变动 2、在Git命令行下输入git add 1.txt(第一次新建文件需输入) 3、在Git命令行下输入git commit -m 1.txt（-m参数取消对文件的描述） 4、在Git命令行下输入git push，即上传至云端 "},"content/exp02.html":{"url":"content/exp02.html","title":"实验二","keywords":"","body":"实验二 附源代码 graph_exp graph_sinx graph_step "},"content/exp03.html":{"url":"content/exp03.html","title":"实验三","keywords":"","body":"实验三 1、安装pyqt5和pyqt5-tools 用以下命令安装 $ pip install -i https://mirrors.aliyun.com/pypi/simple/ pyqt5 $ pip install -i https://mirrors.aliyun.com/pypi/simple/ pyqt5-tools 2、使用QT designer绘制窗体 在X:\\Python385\\Lib\\site-packages\\pyqt5_tools\\Qt\\bin打开designer 绘制如下窗体 在右边的属性编辑器中分别修改windowTitle，QAbstractButton，如图 保存为ui文件，在文件目录下进行py文件编译 $pyuic5 -o [FileName].py [FileName].ui 新建项目，将写好的离散信号源代码与窗体源代码放入同一目录 在main中，定义编译函数绑定至按钮点击事件 import sys import os . . . self.pushButton.clicked.connect(self.button1) . . . def button1(self): str1=('python button1.py') os.system(str1) 加入PyQt主函数运行窗体 if __name__ == \"__main__\": app = QApplication(sys.argv) test_demo = Function() test_demo.show() sys.exit(app.exec_()) 附源代码 "},"content/exp04.html":{"url":"content/exp04.html","title":"实验四","keywords":"","body":"使用方法： main.py为主窗口文件，运行即可。 开发日志： 2020/11/26 知道了我们要做的东西是个叫DTMF的玩意，百度百科提供了很多资料 2020/11/26 找到了可用的DTMF分析源码，只进行了调试，没有修改 2020/12/10 找到了可用的DTMF识别源码，只进行了调试，没有修改 2020/12/20 修改了分析和识别源码，并设计了初版的GUI，将其命名为1.0能用版本 2021/1/1 继续修改分析和识别源码，由于遇到严重BUG重做GUI，将其命名为1.1还行版本（为什么我元旦还在写代码） 2021/1/5 最终完善了分析代码，分为单一音频信号分析和所有音频信号分析（加了个循环），并为分析源码和识别源码增加少许注释，重新制作了新版的GUI（因为突然加了所有音频分析的功能），将其命名为1.2一般版本，发布了第一个release 项目内文件含义： README.md：就是你现在看的这玩意，是开发日记desu. single_analyzer.py：单个DTMF信号分析源码，可进行音频文件的频谱分析，并绘图输出 all_analyzer.py：所有DTMF信号分析源码，可进行音频文件的频谱分析，并绘图输出，用于找到DTMF信号分布规律 detector.py：DTMF信号识别源码，是最终识别出音频内容的输出工具 extensions.pylintrc：强行导入pyqt5的库，不让vs报错 main.py：编译后可运行的窗口main文件，最终的主文件，运行GUI和进行分析和识别操作. window.ui：未经转换的pyqt-designer编译的GUI源文件. 以下是文件夹： samples：放入了从0到#所有的音频文件，用来统一分析并生成散点图（一般不用动） test：默认放入一个拨号音为0的音频文件，可替换为任意拨号音（记得改为test），只有在这个文件夹中的文件才能进行转码和降噪处理，并进行分析识别。 源码 发布包 "}}